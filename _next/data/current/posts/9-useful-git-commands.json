{"pageProps":{"postData":{"id":"9-useful-git-commands","contentHtml":"<p>Here we're going to explore some common Git commands, which help you work more fluid with Git, you can revisit this page when whenever you need these commands.</p>\n<h2>Basic Commands</h2>\n<p>First we'll begin with some basic commands, these will help you to set up your enviroment and create a local reposiory:</p>\n<p><em>Note</em>: we can have two repositories. A local repository (in your computer) and remote repository (generally a repo on GitHub, GitLab, etc)</p>\n<pre><code># Config/Update your username/email\ngit config --global user.name \"your_name\"\ngit config --global user.email \"your_name@gmail.com\"\n\n# Check your username/email\ngit config --global user.name\ngit config --global user.email\n\n# Create your local repository\n# you need to run this command in your project folder\ngit init \n\n# For an existing repository you can clone that repo\ngit clone [repository-url]\n</code></pre>\n<p>Now we are going to check a basic workflow to add changes in your project</p>\n<pre><code># When you change a folder/file in your project you can\n# show your current unstaged changes with this command\ngit status\n\n# Add your new changes to staging area\n# To do this you can use two commands\n# You can add an especifically directory or file, e.g.\ngit add filename\n\n# You can add all the changes \n# this command stages all your changes\ngit add -A\n# stages new files and modifications, **without deleted files** \ngit add . \n\n# Commit (make a record of your changes)\n# -m flag is used to add an inline commit message, instead of open an editor\ngit commit -m \"Commit message\" \n\n# Show commits history\ngit log\n\n# Send changes to remote repo\ngit push origin branch-name\n</code></pre>\n<p>Once we know the basic git workflow to save/track changes in our projects. It's moment to see more commands and variation of above commands.</p>\n<h2>Basic Commands Variations</h2>\n<p>Instead of execute <code>git add</code> and <code>git commit</code> as differents commands we can do it in one command:</p>\n<pre><code># -a automatically stage all tracked, modified files before the commit\ngit commit -am \"Commit message\"\n</code></pre>\n<p>Show one line commits history</p>\n<pre><code>git log --pretty=oneline\n# Show a tree view\ngit log --graph --oneline --all\n</code></pre>\n<h2>Branch</h2>\n<p>Command to work with branches</p>\n<p>Creating a new branch</p>\n<pre><code># This command only creates the branch but you still are in the current branch\ngit branch new-branch\n</code></pre>\n<p>Show all branches</p>\n<pre><code># This command only creates the branch but you still are in the current branch\ngit branch\n</code></pre>\n<p>Deleting a branch</p>\n<pre><code>git branch -D new-branch\n</code></pre>\n<h2>Checkout</h2>\n<p>This command is used to move between <a href=\"https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell\">branches</a> or as alternative to create a branch, also you can restart your changes with this command.</p>\n<p>Creating a new branch and moving to the new branch</p>\n<pre><code>git checkout -b branch-name\n</code></pre>\n<p>Moving to an specifict branch</p>\n<pre><code>git checkout specifict-branch\n</code></pre>\n<p>Return to previus branch</p>\n<pre><code>git checkout -\n</code></pre>\n<p>Remove unstaged changes</p>\n<pre><code>git checkout .\n</code></pre>\n<h2>Stash</h2>\n<p>This is a useful command, I think is like copy/paste but for your work when yout are working with Git. Usually you can run this command to move your work from one branch to another branch.</p>\n<p>Stashinng changes</p>\n<pre><code>git stash\n</code></pre>\n<p>List stashing changes</p>\n<pre><code>git stash list\n</code></pre>\n<p>Apply last stashed change</p>\n<pre><code>git stash apply\n</code></pre>\n<h2>Rebase</h2>\n<p>This is a command to combine your work with others work. It's similar to <code>merge</code> command, but you can do more things, like combine commits or rename them, etc.</p>\n<p>Rebase your branch from master branch</p>\n<pre><code>git rebase master\n</code></pre>\n<p>Rebase your changes interactively</p>\n<pre><code># rebase interactively with master branch\ngit rebase -i master\n# rebase interactively your last 3 commits\ngit rebase -i HEAD~3\n</code></pre>\n<p>Interactively means that Git opens your default editor to allow you to manage your commits</p>\n<h2>Reset and Revert</h2>\n<p>I usually use this command to reset last change than inentantionally I created. You can use revert when you want to create a explicit commit that show the revert changes,\nthis is specially to send public commits showing the revert changes</p>\n<p>Reset/Remove last change</p>\n<pre><code># Keeps the changes in the staging area\ngit reset --soft HEAD~1\n# Remove all modifications in the last change\ngit reset --hard HEAD~1\n</code></pre>\n<p>Revert a commit</p>\n<pre><code>git revert commit-hash # a8c0c0b8q\n</code></pre>\n<h2>Fetch and Diff</h2>\n<p>Fetch is useful when you want to update your local branch with a remote one.\nDiff allows you to compare the changes of your current branch with other branches</p>\n<p>Fetch changes from a remote branch</p>\n<pre><code>git fetch origin branch-name\n</code></pre>\n<p>Compare your branch with others</p>\n<pre><code>git diff other-branch\n</code></pre>\n<h2>Pull &#x26; Push</h2>\n<p>This allows you to send/get changes to/from a remote repository</p>\n<p>Get changes from a remote branch</p>\n<pre><code>git pull origin branch-name\n</code></pre>\n<p>Send changes to a remote branch</p>\n<pre><code>git push origin branch-name\n# when you made a rebase, generally you need to force a push\n# we use --force-with-lease to don't override other's changes\ngit push origin branch-name --force-with-lease\n</code></pre>\n","title":"9 useful Git commands","date":"2021-09-25"}},"__N_SSG":true}